import{_ as e,c as r,o as s,b as n}from"./app.bac780e5.js";const m='{"title":"Using Vue in Markdown","description":"","frontmatter":{},"headers":[{"level":2,"title":"Browser API Access Restrictions","slug":"browser-api-access-restrictions"},{"level":2,"title":"","slug":""}],"relativePath":"guide/using-vue.md"}',t={},a=n('<h1 id="using-vue-in-markdown" tabindex="-1">Using Vue in Markdown <a class="header-anchor" href="#using-vue-in-markdown" aria-hidden="true">#</a></h1><h2 id="browser-api-access-restrictions" tabindex="-1">Browser API Access Restrictions <a class="header-anchor" href="#browser-api-access-restrictions" aria-hidden="true">#</a></h2><p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href="https://ssr.vuejs.org/en/universal.html" target="_blank" rel="noopener noreferrer">universal code requirements</a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p><p>If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>',5),o=[a];function i(c,d,u,h,l,_){return s(),r("div",null,o)}var g=e(t,[["render",i]]);export{m as __pageData,g as default};
